[
  {
    "title": "Cash Pawn & Jewelry Website",
    "websiteURL": "https://veropawn.net/",
    "githubURL": "https://github.com/learnsometing/veropawn.com",
    "cardPhoto": {
      "src": "../images/work-experience/cash-pawn/cash-pawn_1.jpg",
      "altText": "Cash Pawn & Jewelry Website Home Page"
    },
    "carouselPhotos": [
      {
        "src": "../images/work-experience/cash-pawn/cash-pawn_1.jpg",
        "altText": "Cash Pawn & Jewelry Website Home Page",
        "caption": "Landing page"
      },
      {
        "src": "../images/work-experience/cash-pawn/cash-pawn_2.jpg",
        "altText": "Cash Pawn & Jewelry Website Shopping Page",
        "caption": "Shopping page"
      },
      {
        "src": "../images/work-experience/cash-pawn/cash-pawn_3.jpg",
        "altText": "Cash Pawn & Jewelry Website Shopping Page Pagination",
        "caption": "Shopping page call to action"
      },
      {
        "src": "../images/work-experience/cash-pawn/cash-pawn_4.png",
        "altText": "Cash Pawn & Jewelry Website Item Page",
        "caption": "Item page"
      },
      {
        "src": "../images/work-experience/cash-pawn/cash-pawn_5.jpg",
        "altText": "Cash Pawn & Jewelry Website Item Page with Full Screen Carousel",
        "caption": "Item page with full screen carousel"
      }
    ],
    "shortDescription": "A professional website built for Cash Pawn & Jewelry using Gatsby and React.js.",
    "fullDescription": "I developed veropawn.net independently for Cash Pawn & Jewelry, a pawn shop located in Vero Beach, FL. The website is a React web application built on the Gatsby static site generator framework. During this project, I employed responsive and UX friendly designs to implement an online catalog of the shop’s inventory. My main challenge while building this website was my experience level; I had no prior React or Gatsby experience at the beginning of this project and learned both frameworks during development. It was also challenging to retrieve and process the shop’s inventory data. I used the shop’s inventory data to programmatically build thousands of shopping pages and item pages and dynamically generate navigation. The resulting website increased overall sales and customer satisfaction and bolstered the company’s limited web presence.",
    "technologies": [
      "CSS",
      "CSS Modules",
      "E-Commerce",
      "Gatsby",
      "GraphQL",
      "Integration Tests",
      "JavaScript",
      "Jest",
      "Node.js",
      "Post CSS",
      "React",
      "React Testing Library",
      "Responsive Design",
      "Unit Tests"
    ],
    "dateCompleted": "2020-02-25"
  },
  {
    "title": "Responsive Design Study",
    "websiteURL": "https://learnsometing.github.io/responsive-design/",
    "githubURL": "https://github.com/learnsometing/responsive-design",
    "cardPhoto": {
      "src": "../images/work-experience/responsive-design-study/home.png",
      "altText": "A mock of The Next Web website home page used to practice responsive design"
    },
    "carouselPhotos": [
      {
        "src": "../images/work-experience/responsive-design-study/home.png",
        "altText": "A mock of The Next Web website home page used to practice responsive design",
        "caption": "A mock of The Next Web's website."
      }
    ],
    "shortDescription": "A mock of The Next Web's website featuring a responsive layout.",
    "fullDescription": "It's necessary for all web developers to have a solid grasp on responsive design. To develop and apply my understanding of responsive design principles, I mocked the home page of The Next Web's website. I constructed the webpage first using HTML, studied how The Next Web's website responded to changes in the viewport width, and finally used CSS media queries and flexbox to implement the responsive behaviors.",
    "technologies": ["CSS", "HTML", "Responsive Design"],
    "dateCompleted": "2019-09-17"
  },
  {
    "title": "React Weather App",
    "websiteURL": "https://learnsometing.github.io/JS-weather-api-app/",
    "githubURL": "https://github.com/learnsometing/JS-weather-api-app",
    "cardPhoto": {
      "src": "../images/work-experience/weather-api-app/home.png",
      "altText": "A photo of the OpenWeatherMap API app displaying the weather for Beacon, US."
    },
    "carouselPhotos": [
      {
        "src": "../images/work-experience/weather-api-app/home.png",
        "altText": "A photo of the OpenWeatherMap API app displaying the weather for Beacon, US.",
        "caption": "Weather for Beacon, US."
      }
    ],
    "shortDescription": "A React weather app that shows the current forecast in a searchable area.",
    "fullDescription": "Data-driven applications rely on APIs to retrieve and mutate data in a convenient and efficient manner. Making asynchronous calls to third-party APIs can be tricky though. I built this project to practice both asynchronous JavaScript and using fetch to make REST API calls. It displays the current forecast for the area the user chooses to search. I chose to build it using React instead of vanilla JS for more React practice also.",
    "technologies": [
      "CSS",
      "CSS Modules",
      "JavaScript",
      "Jest",
      "React",
      "React Testing Library",
      "Third-Party APIs",
      "Unit Tests"
    ],
    "dateCompleted": "2020-01-07"
  },
  {
    "title": "Dev Communities Social App",
    "websiteURL": "https://dev-communities.herokuapp.com/",
    "githubURL": "https://github.com/learnsometing/dev-communities",
    "cardPhoto": {
      "src": "../images/work-experience/dev-communities/home.png",
      "altText": "A photo of the Dev Communities home page."
    },
    "carouselPhotos": [
      {
        "src": "../images/work-experience/dev-communities/home.png",
        "altText": "A photo of the Dev Communities home page.",
        "caption": "Dev Communities landing page."
      },
      {
        "src": "../images/work-experience/dev-communities/sign-up.png",
        "altText": "Create account form with full name, email, password, and password confirmation fields.",
        "caption": "Sign up page."
      },
      {
        "src": "../images/work-experience/dev-communities/post-sign-up.png",
        "altText": "The landing page with a notification telling the user to check their email for a confirmation link.",
        "caption": "Sign up requires email confirmation."
      },
      {
        "src": "../images/work-experience/dev-communities/confirmation-email.png",
        "altText": "An email with a link to confirm the user's account.",
        "caption": "Confirmation email."
      },
      {
        "src": "../images/work-experience/dev-communities/account-confirmation.png",
        "altText": "A log in page with an account confirmation notification and a form with email and password fields.",
        "caption": "Log in page."
      },
      {
        "src": "../images/work-experience/dev-communities/location-page.png",
        "altText": "A page showing a google map and a pop up informing the user about google location services.",
        "caption": "After sign up, the user must choose their location."
      },
      {
        "src": "../images/work-experience/dev-communities/choose-location.png",
        "altText": "The user is selecting a location on the google map, and a pop up is asking the user to confirm their location.",
        "caption": "The desired location is chosen using the google places API."
      },
      {
        "src": "../images/work-experience/dev-communities/skill-technologies.png",
        "altText": "A form asking the user which programming languages they use, which can be chosen via a multi select search.",
        "caption": "Each user selects their programming languages of choice for search purposes."
      },
      {
        "src": "../images/work-experience/dev-communities/new-profile.png",
        "altText": "The user's profile, with a default photo, the user's name, a tag cloud of the user's skills, the user's location, a link to the user's friends list, and a form for making posts.",
        "caption": "A new user profile."
      },
      {
        "src": "../images/work-experience/dev-communities/picture-upload.png",
        "altText": "A form for uploading profile pictures to s3, with browse, upload, and cancel buttons.",
        "caption": "Each user can upload their profile pictures to S3."
      },
      {
        "src": "../images/work-experience/dev-communities/picture-upload-confirmation.png",
        "altText": "The user's profile with newly added profile picture.",
        "caption": "Successful profile picture upload."
      },
      {
        "src": "../images/work-experience/dev-communities/feed.png",
        "altText": "The user's post feed, displaying posts from all the user's friends.",
        "caption": "Post feed."
      },
      {
        "src": "../images/work-experience/dev-communities/friend-profile.png",
        "altText": "The profile of another user that is not friends with the logged in user with message and friend request buttons.",
        "caption": "A user that isn't friends with the logged-in user."
      },
      {
        "src": "../images/work-experience/dev-communities/friend-request.png",
        "altText": "The profile of another user after sending them a friend request",
        "caption": "Friend request."
      },
      {
        "src": "../images/work-experience/dev-communities/friends-list.png",
        "altText": "The user's friends list, showing three friends.",
        "caption": "Friends list."
      },
      {
        "src": "../images/work-experience/dev-communities/friend-requests.png",
        "altText": "A page showing the user's friend requests, with 5 requests pending.",
        "caption": "Pending friend requests."
      },
      {
        "src": "../images/work-experience/dev-communities/conversation.png",
        "altText": "A page showing a conversation between two users.",
        "caption": "Chat with friends through conversations."
      },
      {
        "src": "../images/work-experience/dev-communities/notifications.png",
        "altText": "A page showing the user's notifications, each with mark as read button.",
        "caption": "Notifications are generated through posts and friend requests."
      }
    ],
    "shortDescription": "A Ruby on Rails social media app for developers.",
    "fullDescription": "Dev Communities is my final project in the Odin Project Ruby on Rails curriculum. It was inspired by Facebook, Meetup, and Stack Overflow. I wanted Dev Communities to enable developers to discover each other and form communities they could engage in. In the end, I had to cut some of the features to have the app in a working state in time for it to be presented to my local development community, so it resembles Facebook more than anything. I struggled the most with developing a notifications system for the application, but I thouroughly enjoyed modeling the data relationships that power its main features.",
    "technologies": [
      "AWS S3",
      "Bootstrap",
      "CSS",
      "HTML",
      "Integration Tests",
      "Minitest",
      "MVC Architecture",
      "PostgreSQL",
      "Public Presentations",
      "RESTful Services",
      "Ruby",
      "Ruby on Rails",
      "Third-Party APIs",
      "Unit Tests"
    ],
    "dateCompleted": "2019-08-16"
  },
  {
    "title": "Rails Flight Booker",
    "websiteURL": "https://learnsometing-flight-booker.herokuapp.com/",
    "githubURL": "https://github.com/learnsometing/rails-flight_booker",
    "cardPhoto": {
      "src": "../images/work-experience/rails-flight-booker/home.jpg",
      "altText": "The home page of the rails flight booker app, displaying a menu with flight choices."
    },
    "carouselPhotos": [
      {
        "src": "../images/work-experience/rails-flight-booker/home.jpg",
        "altText": "The home page of the rails flight booker app, displaying a menu with flight choices.",
        "caption": "Easily pick a flight from the home screen."
      },
      {
        "src": "../images/work-experience/rails-flight-booker/check-in.jpg",
        "altText": "A form that takes the names and emails of each passenger.",
        "caption": "Enter the names and emails of each passenger to confirm."
      },
      {
        "src": "../images/work-experience/rails-flight-booker/itinerary-confirmation.jpg",
        "altText": "A confirmation screen for the flight the user picked.",
        "caption": "Get confirmation of your flight after sign up."
      }
    ],
    "shortDescription": "The typical airline booking flow in a Rails App.",
    "fullDescription": "Forms are used on even the simplest websites to gather information from the user. This app was an exercise in building forms in Ruby on Rails. Users pick their desired departure and arrival destinations and enter the number of passengers, then pick the desired flight, and finally enter information on each passenger. Rails provides convenient methods to associate form fields with model fields that simplify submitting user data to the database.",
    "technologies": [
      "Bootstrap",
      "CSS",
      "HTML5 Forms",
      "HTML",
      "MVC Architecture",
      "RESTful Services",
      "Ruby on Rails",
      "Ruby",
      "Unit Tests"
    ],
    "dateCompleted": "2019-07-01"
  },
  {
    "title": "Hostr",
    "websiteURL": "https://learnsometing-private-events.herokuapp.com/",
    "githubURL": "https://github.com/learnsometing/rails-private_events",
    "cardPhoto": {
      "src": "../images/work-experience/rails-private-events/home.jpg",
      "altText": "A sign-up button on the home page of the rails private events app."
    },
    "carouselPhotos": [
      {
        "src": "../images/work-experience/rails-private-events/home.jpg",
        "altText": "A sign-up button on the home page of the rails private events app.",
        "caption": "Landing Page."
      },
      {
        "src": "../images/work-experience/rails-private-events/sign-up.jpg",
        "altText": "A form asking the user to enter their name and a button to sign the user up.",
        "caption": "Sign up page."
      },
      {
        "src": "../images/work-experience/rails-private-events/sign-up-confirmation.jpg",
        "altText": "A notification telling the user they were signed up as John Doe, and a button for creating events.",
        "caption": "Sign up confirmation."
      },
      {
        "src": "../images/work-experience/rails-private-events/event-creation.jpg",
        "altText": "A form for creating an event with location, date, and description fields.",
        "caption": "Create an event."
      },
      {
        "src": "../images/work-experience/rails-private-events/event-confirmation.jpg",
        "altText": "A notification of a successfully created event with event itinerary.",
        "caption": "Successful event creation."
      },
      {
        "src": "../images/work-experience/rails-private-events/send-invitations.jpg",
        "altText": "A form for inviting users to the newly created event. Each user's name is displayed next to a checkbox.",
        "caption": "Invite some friends!"
      },
      {
        "src": "../images/work-experience/rails-private-events/invitations.jpg",
        "altText": "A box displaying the user's invitations, which is currently empty.",
        "caption": "Check your invitations (no one likes me :( )."
      },
      {
        "src": "../images/work-experience/rails-private-events/previous-events.jpg",
        "altText": "A page showing all of the previously held events as cards with address and date.",
        "caption": "Browse all previous events."
      },
      {
        "src": "../images/work-experience/rails-private-events/upcoming-events.jpg",
        "altText": "A box showing all of the upcoming events, which is empty because there are none.",
        "caption": "Browse upcoming events."
      }
    ],
    "shortDescription": "A Ruby on Rails event hosting app.",
    "fullDescription": "Relational databases provide a means to relate datasets to each other through foreign key associations. Under the hood, Rails uses the ActiveRecord ORM to implement database relations through ActiveRecord associations. Hostr is an eventbrite inspired app that was developed to practice using ActiveRecord associations. Users can sign up with their name, create events, and invite other users to their own events. All previous and upcoming events can be browsed as well.",
    "technologies": [
      "Bootstrap",
      "CSS",
      "HTML",
      "MVC Architecture",
      "RESTful Services",
      "Ruby",
      "Ruby on Rails"
    ],
    "dateCompleted": "2019-06-10"
  },
  {
    "title": "Pomodoro Timer",
    "websiteURL": "https://learnsometing.github.io/pomodoro-timer/",
    "githubURL": "https://github.com/learnsometing/pomodoro-timer",
    "cardPhoto": {
      "src": "../images/work-experience/pomodoro/home.png",
      "altText": "Pomodoro timer displaying a time of 24 minutes and 55 seconds."
    },
    "carouselPhotos": [
      {
        "src": "../images/work-experience/pomodoro/home.png",
        "altText": "Pomodoro timer displaying a time of 24 minutes and 55 seconds.",
        "caption": "A normal 25 minute pomodoro session."
      },
      {
        "src": "../images/work-experience/pomodoro/long-break.png",
        "altText": "Pomodoro timer displaying a time of 10 minutes.",
        "caption": "A ten minute long break."
      },
      {
        "src": "../images/work-experience/pomodoro/short-break.png",
        "altText": "Pomodoro timer displaying a time of 5 minutes.",
        "caption": "A five minute short break."
      }
    ],
    "shortDescription": "A pomodoro timer created as a pair programming exercise.",
    "fullDescription": "Pomodoro is a time management and endurance technique. Work is broken down into 25 minute intervals, followed by a short five minute break. After 4 Pomodoros, the break time is expanded to ten minutes. This project was an exercise in using the pomodoro technique in pair programming. It was challenging to work with someone that I'd never worked with before, but it was a valuable exercise in communication and patience.",
    "technologies": [
      "Collaboration",
      "CSS",
      "HTML",
      "JavaScript",
      "Pair Programming"
    ],
    "dateCompleted": "2019-01-31"
  },
  {
    "title": "Web Calculator",
    "websiteURL": "https://learnsometing.github.io/odin-project-calculator/",
    "githubURL": "https://github.com/learnsometing/odin-project-calculator",
    "cardPhoto": {
      "src": "../images/work-experience/js-calculator/calculation.jpg",
      "altText": "Entering a calculation requiring order of operations."
    },
    "carouselPhotos": [
      {
        "src": "../images/work-experience/js-calculator/calculation.jpg",
        "altText": "Entering a calculation requiring order of operations.",
        "caption": "Entering a calculation requiring order of operations."
      },
      {
        "src": "../images/work-experience/js-calculator/result.jpg",
        "altText": "The number 52 displayed on the calculator after pressing enter",
        "caption": "The calculator works!"
      }
    ],
    "shortDescription": "A JavaScript calculator that uses the shunting-yard algorithm to implement order of operations.",
    "fullDescription": "The web relies on JavaScript to add rich, dynamic features that aren't otherwise possible with HTML and CSS alone. This project was an exercise in using JavaScript to perform calculations on user input. It tokenizes the user input then leverages the shunting-yard algorithm to perform order of operations. It was challenging to decide how to track changes to the user input and to perform the calculations in the correct order. After completing the project on my own, I learned about JavaScript's eval() function, which could have been used instead of the shunting-yard algorithm.",
    "technologies": ["Algorithms", "CSS", "CSS Grid", "HTML", "JavaScript"],
    "dateCompleted": "2019-01-28"
  },
  {
    "title": "Etch-a-sketch",
    "websiteURL": "https://learnsometing.github.io/etchASketch/",
    "githubURL": "https://github.com/learnsometing/etchASketch",
    "cardPhoto": {
      "src": "../images/work-experience/etch-a-sketch/main.png",
      "altText": "Etch a sketch made with HTML and CSS displaying a drawing of a plant."
    },
    "carouselPhotos": [
      {
        "src": "../images/work-experience/etch-a-sketch/main.png",
        "altText": "Etch a sketch made with HTML and CSS displaying a drawing of a plant.",
        "caption": "An Etch-a-Sketch drawing."
      }
    ],
    "shortDescription": "An HTML5, CSS, and JavaScript Etch-a-Sketch.",
    "fullDescription": "Unleash your inner artist in my JavaScript recreation of the Etch-a-Sketch! JS is used to build a grid with a user-defined number of cells, then onMouseOver events are used to toggle a class on each cell to implement the drawing effect.",
    "technologies": ["CSS", "HTML", "JavaScript"],
    "dateCompleted": "2018-11-06"
  },
  {
    "title": "Google Homepage",
    "websiteURL": "https://learnsometing.github.io/google_homepage/",
    "githubURL": "https://github.com/learnsometing/google_homepage",
    "cardPhoto": {
      "src": "../images/work-experience/google-homepage/main.png",
      "altText": "Photo of the mock google homepage I designed."
    },
    "carouselPhotos": [
      {
        "src": "../images/work-experience/google-homepage/main.png",
        "altText": "Photo of the mock google homepage I designed.",
        "caption": "Mock Google home page."
      }
    ],
    "shortDescription": "My first webpage; a recreation of the Google home page.",
    "fullDescription": "I recreated the Google home page after learning some basic HTML and CSS. I struggled with the most with layout in this project.",
    "technologies": ["CSS", "HTML"],
    "dateCompleted": "2018-10-02"
  }
]
